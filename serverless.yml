# yarn sls deploy
service: queuetest
useDotenv: true

frameworkVersion: '3'

plugins:
  - serverless-python-requirements

custom:
  UsersTable:
    name: !Ref UsersTable
    arn: !GetAtt UsersTable.Arn
  pythonRequirements:
    dockerizePip: true
    layer: true
    slim: true
    strip: false
    cacheLocation: ${env:PYREQ_CACHE_FOLDER, ''}
    
package:
  exclude:      
    - .vscode/**
    - node_modules/**
    - yarn.lock
    - package.json
    - "**/__pycache__/**"      
    - tmp/**
    - temp/**
    - venv/**

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - ${file(UsersTableIAM.yml):UsersTableIAM}
    - ${file(UsersTopicIAM.yml):UsersTopicIAM}
  environment:    
    NEW_USERS_TOPIC_ARN: !ImportValue ${opt:stage, 'dev'}-newUsersTopic-Arn
    DB_USER: ${env:DB_USER}

resources:
  Resources:
    UsersTable: ${file(UsersTable.yml):UsersTable}

functions:
  app:
    handler: handler.run
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - http:
          method: POST
          path: /app
  
  hello:
    handler: hello.run
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - http:
          method: GET
          path: /hello

  # sns handler
  users_notify:
    handler: users_notify.run
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - sns:
          arn: !ImportValue ${opt:stage, 'dev'}-newUsersTopic-Arn
          topicName: 'newUsersTopic'

  # sqs handler
  process_new_users:
    handler: process_new_users.run
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - sqs:
          arn: !ImportValue ${opt:stage, 'dev'}-newUsersQueue-Arn




